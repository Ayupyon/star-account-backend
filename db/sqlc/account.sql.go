// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    name
) VALUES (
    $1
) RETURNING id, name, create_time
`

func (q *Queries) CreateAccount(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, name)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.CreateTime)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id=$1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteAccountsByIds = `-- name: DeleteAccountsByIds :exec
DELETE FROM accounts WHERE id=ANY($1::bigint[])
`

func (q *Queries) DeleteAccountsByIds(ctx context.Context, ids []int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountsByIds, pq.Array(ids))
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, create_time FROM accounts WHERE id=$1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.CreateTime)
	return i, err
}

const getAccountsByIds = `-- name: GetAccountsByIds :many
SELECT id, name, create_time FROM accounts WHERE id=ANY($1::bigint[])
`

func (q *Queries) GetAccountsByIds(ctx context.Context, ids []int64) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByIds, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Name, &i.CreateTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountName = `-- name: UpdateAccountName :exec
UPDATE accounts SET name=$2 WHERE id=$1
`

type UpdateAccountNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateAccountName(ctx context.Context, arg UpdateAccountNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountName, arg.ID, arg.Name)
	return err
}
