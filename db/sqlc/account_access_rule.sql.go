// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account_access_rule.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createAccountAccessRule = `-- name: CreateAccountAccessRule :one
INSERT INTO account_access_rules (
    user_id,
    account_id,
    role
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, account_id, role
`

type CreateAccountAccessRuleParams struct {
	UserID    int64 `json:"user_id"`
	AccountID int64 `json:"account_id"`
	Role      int32 `json:"role"`
}

func (q *Queries) CreateAccountAccessRule(ctx context.Context, arg CreateAccountAccessRuleParams) (AccountAccessRule, error) {
	row := q.db.QueryRowContext(ctx, createAccountAccessRule, arg.UserID, arg.AccountID, arg.Role)
	var i AccountAccessRule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.Role,
	)
	return i, err
}

const deleteAccountAccessRule = `-- name: DeleteAccountAccessRule :exec
DELETE FROM account_access_rules WHERE id=$1
`

func (q *Queries) DeleteAccountAccessRule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountAccessRule, id)
	return err
}

const deleteAccountAccessRuleByUserIdAndAccountId = `-- name: DeleteAccountAccessRuleByUserIdAndAccountId :exec
DELETE FROM account_access_rules WHERE user_id=$1 AND account_id=$2
`

type DeleteAccountAccessRuleByUserIdAndAccountIdParams struct {
	UserID    int64 `json:"user_id"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) DeleteAccountAccessRuleByUserIdAndAccountId(ctx context.Context, arg DeleteAccountAccessRuleByUserIdAndAccountIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccountAccessRuleByUserIdAndAccountId, arg.UserID, arg.AccountID)
	return err
}

const deleteAccountAccessRulesByAccountId = `-- name: DeleteAccountAccessRulesByAccountId :exec
DELETE FROM account_access_rules WHERE account_id=$1
`

func (q *Queries) DeleteAccountAccessRulesByAccountId(ctx context.Context, accountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountAccessRulesByAccountId, accountID)
	return err
}

const deleteAccountAccessRulesByAccountIds = `-- name: DeleteAccountAccessRulesByAccountIds :exec
DELETE FROM account_access_rules WHERE account_id=ANY($1::bigint[])
`

func (q *Queries) DeleteAccountAccessRulesByAccountIds(ctx context.Context, ids []int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountAccessRulesByAccountIds, pq.Array(ids))
	return err
}

const deleteAccountAccessRulesByUserId = `-- name: DeleteAccountAccessRulesByUserId :exec
DELETE FROM account_access_rules WHERE user_id=$1
`

func (q *Queries) DeleteAccountAccessRulesByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountAccessRulesByUserId, userID)
	return err
}

const getAccountAccessRuleByUserIdAndAccountId = `-- name: GetAccountAccessRuleByUserIdAndAccountId :one
SELECT id, user_id, account_id, role FROM account_access_rules WHERE user_id=$1 AND account_id=$2
`

type GetAccountAccessRuleByUserIdAndAccountIdParams struct {
	UserID    int64 `json:"user_id"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) GetAccountAccessRuleByUserIdAndAccountId(ctx context.Context, arg GetAccountAccessRuleByUserIdAndAccountIdParams) (AccountAccessRule, error) {
	row := q.db.QueryRowContext(ctx, getAccountAccessRuleByUserIdAndAccountId, arg.UserID, arg.AccountID)
	var i AccountAccessRule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.Role,
	)
	return i, err
}

const getAccountIdsByCreateUserIdForDelete = `-- name: GetAccountIdsByCreateUserIdForDelete :many
SELECT account_id FROM account_access_rules 
WHERE user_id=$1 AND role=2
FOR UPDATE
`

func (q *Queries) GetAccountIdsByCreateUserIdForDelete(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getAccountIdsByCreateUserIdForDelete, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var account_id int64
		if err := rows.Scan(&account_id); err != nil {
			return nil, err
		}
		items = append(items, account_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountIdsByUserIdAndRole = `-- name: GetAccountIdsByUserIdAndRole :many
SELECT account_id FROM account_access_rules
WHERE user_id=$1 AND role=$2
OFFSET $3
LIMIT $4
`

type GetAccountIdsByUserIdAndRoleParams struct {
	UserID int64 `json:"user_id"`
	Role   int32 `json:"role"`
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func (q *Queries) GetAccountIdsByUserIdAndRole(ctx context.Context, arg GetAccountIdsByUserIdAndRoleParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getAccountIdsByUserIdAndRole,
		arg.UserID,
		arg.Role,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var account_id int64
		if err := rows.Scan(&account_id); err != nil {
			return nil, err
		}
		items = append(items, account_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsCountByUserIdAndRole = `-- name: GetAccountsCountByUserIdAndRole :one
SELECT COUNT(*) FROM account_access_rules WHERE user_id=$1 AND role=$2
`

type GetAccountsCountByUserIdAndRoleParams struct {
	UserID int64 `json:"user_id"`
	Role   int32 `json:"role"`
}

func (q *Queries) GetAccountsCountByUserIdAndRole(ctx context.Context, arg GetAccountsCountByUserIdAndRoleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountsCountByUserIdAndRole, arg.UserID, arg.Role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserIdsByAccountIdAndRole = `-- name: GetUserIdsByAccountIdAndRole :many
SELECT user_id FROM account_access_rules
WHERE account_id=$1 AND role=$2
OFFSET $3
LIMIT $4
`

type GetUserIdsByAccountIdAndRoleParams struct {
	AccountID int64 `json:"account_id"`
	Role      int32 `json:"role"`
	Offset    int64 `json:"offset"`
	Limit     int64 `json:"limit"`
}

func (q *Queries) GetUserIdsByAccountIdAndRole(ctx context.Context, arg GetUserIdsByAccountIdAndRoleParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUserIdsByAccountIdAndRole,
		arg.AccountID,
		arg.Role,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var user_id int64
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCountByAccountIdAndRole = `-- name: GetUsersCountByAccountIdAndRole :one
SELECT COUNT(*) FROM account_access_rules WHERE account_id=$1 AND role=$2
`

type GetUsersCountByAccountIdAndRoleParams struct {
	AccountID int64 `json:"account_id"`
	Role      int32 `json:"role"`
}

func (q *Queries) GetUsersCountByAccountIdAndRole(ctx context.Context, arg GetUsersCountByAccountIdAndRoleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCountByAccountIdAndRole, arg.AccountID, arg.Role)
	var count int64
	err := row.Scan(&count)
	return count, err
}
